# this is the codes for TET2 chipseq visulization
# first R to convert GTF to bed file
# eventually we decided to subset only the lineage plastic associated genes
library(dplyr)library(rtracklayer)setwd("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu")C42_DMSO1=read.delim("C42_DMSO_1_peaks.annotatePeaks.txt")C42_DMSO1=subset(C42_DMSO1,grepl("TSS",C42_DMSO1$Annotation))C42_DMSO2=read.delim("C42_DMSO_2_peaks.annotatePeaks.txt")C42_DMSO2=subset(C42_DMSO2,grepl("TSS",C42_DMSO2$Annotation))C42_ENZ1=read.delim("C42_ENZ_1_peaks.annotatePeaks.txt")C42_ENZ1=subset(C42_ENZ1,grepl("TSS",C42_ENZ1$Annotation))C42_ENZ2=read.delim("C42_ENZ_2_peaks.annotatePeaks.txt")C42_ENZ2=subset(C42_ENZ2,grepl("TSS",C42_ENZ2$Annotation))# identify C42 binding peakspeak=intersect(C42_ENZ1$Entrez.ID,C42_ENZ2$Entrez.ID)# now identify all lineage plastic genesplastic=read.csv("all_lineage_plastic_genes.csv")plastic=unique(unlist(as.list(plastic)))# identify overlapoverlap=intersect(peak,plastic)# subset bed filesgtf=readGFF("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu/IGV/bigwig/gencode.gtf")gtf=subset(gtf,gtf$type=="transcript")bed=gtf[,c(1,4,5,9,11)]# subset bed files to gene levelgtf=readGFF("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu/IGV/bigwig/gencode.gtf")gtf=subset(gtf,gtf$type=="gene")bed=gtf[,c(1,4,5,9,11)]# now only generate plastic regionssubset_bed_data=bed[bed$gene_name %in% plastic, ]write.table(subset_bed_data, file = "plastic_gene.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)# now try another GRCh38 GTF which I used for ChIPseq alignmentgtf=readGFF("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu/IGV/bigwig/genes_NCBI.gtf")gtf=subset(gtf,gtf$type=="transcript")bed=gtf[,c(1,4,5,9,11)]# subset bed files to gene levelgtf=readGFF("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu/IGV/bigwig/gencode.gtf")gtf=subset(gtf,gtf$type=="gene")bed=gtf[,c(1,4,5,9,11)]# now only generate plastic regionssubset_bed_data=bed[bed$gene_name %in% plastic, ]write.table(subset_bed_data, file = "plastic_gene_NCBI.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)# annotiated the cluster region to identify gene symbolsresult=read.table("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu/IGV/bigwig/cluster_info_2clusters_gene_NCBI.bed", header = F, stringsAsFactors = FALSE)gtf=readGFF("/Users/siyuan/Library/CloudStorage/OneDrive-LSUHealthShreveport/analysis_for_other_labs/Mu/IGV/bigwig/gencode.gtf")gtf=subset(gtf,gtf$type=="gene")bed=gtf[,c(1,4,5,9,11)]result$ID=paste0(result$V2,result$V3)bed$ID=paste0(bed$start,bed$end)result_anno=merge(result,bed,by="ID")result_anno=subset(result_anno,result_anno$V13=="cluster_1")write.csv(result_anno,"cluster1_genes(fromNCBI).csv")# this is to subset bed files# basalbed_data <- read.table("genes.bed", header = FALSE, stringsAsFactors = FALSE)bed_data=bed_data[,-c(5,7)]genes=read.csv("genes.csv")subset_bed_data=bed_data[bed_data$V6 %in% genes$B, ]write.table(subset_bed_data, file = "basal.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)#stembed_data <- read.table("genes.bed", header = FALSE, stringsAsFactors = FALSE)bed_data=bed_data[,-c(5,7)]genes=read.csv("genes.csv")subset_bed_data=bed_data[bed_data$V6 %in% genes$S, ]write.table(subset_bed_data, file = "stem.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)#EMTbed_data <- read.table("genes.bed", header = FALSE, stringsAsFactors = FALSE)bed_data=bed_data[,-c(5,7)]genes=read.csv("genes.csv")subset_bed_data=bed_data[bed_data$V6 %in% genes$E, ]write.table(subset_bed_data, file = "emt.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)#NEPCabed_data <- read.table("genes.bed", header = FALSE, stringsAsFactors = FALSE)bed_data=bed_data[,-c(5,7)]genes=read.csv("genes.csv")subset_bed_data=bed_data[bed_data$V6 %in% genes$N, ]write.table(subset_bed_data, file = "ne.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)#plasticitybed_data <- read.table("genes.bed", header = FALSE, stringsAsFactors = FALSE)bed_data=bed_data[,-c(5,7)]genes=read.csv("genes.csv")subset_bed_data=bed_data[bed_data$V6 %in% genes$L, ]write.table(subset_bed_data, file = "plastic.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)# restrest_of_rows <- bed_data[!(bed_data$V6 %in% unique(c(genes$B,genes$S,genes$E,genes$N,genes$L))), ]####
# this is bash code to use deeptools
# similar codes were used to for gene level bed files and GTF from NCBI GRCh38
computeMatrix reference-point --referencePoint TSS -b 3000 -a 3000 -R plastic.bed -S C42_DMSO_1.bigWig C42_DMSO_2.bigWig C42_ENZ_1.bigWig C42_ENZ_2.bigWig  --outFileName all.merged.computeMatrix_plastic.mat.gz --numberOfProcessors max --skipZeros --missingDataAsZero

# generate different numbers of clusters
plotHeatmap -m all.merged.computeMatrix_plastic.mat.gz -out heatmap1.png --colorMap Blues Blues Reds Reds --kmeans 3 --outFileSortedRegions cluster_info_3clusters.bed

plotHeatmap -m all.merged.computeMatrix_plastic.mat.gz -out heatmap2.png --colorMap  Blues Blues Reds Reds --kmeans 2 --outFileSortedRegions cluster_info_2clusters.bed